{"version":3,"sources":["ng://ngx-image-compress/lib/DOC_ORIENTATION.ts","ng://ngx-image-compress/lib/image-compress.ts","ng://ngx-image-compress/lib/ngx-image-compress.service.ts"],"names":["Up","Down","Right","Left","UpMirrored","DownMirrored","LeftMirrored","RightMirrored","NotJpeg","NotDefined","ImageCompress","getOrientation","file","callback","reader","FileReader","onload","$event","view","DataView","getUint16","length","byteLength","offset","marker","getUint32","little","tags","i","readAsArrayBuffer","e","uploadFile","render","Promise","resolve","reject","inputElement","createElement","setStyle","setProperty","listen","target","value","files","myReader","onloadend","orientation","image","readAsDataURL","console","warn","click","compress","imageDataUrlSource","ratio","quality","sourceImage","Image","w","h","canvas","ctx","getContext","naturalWidth","naturalHeight","DOC_ORIENTATION","t","width","height","TO_RADIANS","Math","PI","drawImage","save","rotate","translate","restore","mime","substr","split","result","toDataURL","src","byteCount","s","encodeURI","NgxImageCompressService","rendererFactory","this","createRenderer","prototype","compressFile","Injectable","RendererFactory2"],"mappings":"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","sourcesContent":["export enum DOC_ORIENTATION {\n  Up = 1,\n  Down = 3,\n  Right = 6,\n  Left = 8,\n  UpMirrored = 2,\n  DownMirrored = 4,\n  LeftMirrored = 5,\n  RightMirrored = 7,\n  NotJpeg = -1,\n  NotDefined = -2\n}\n","import {Renderer2} from '@angular/core';\nimport { DOC_ORIENTATION } from './DOC_ORIENTATION'\n\nexport class ImageCompress {\n\n\n  /**\n   * Get the correct Orientation value from tags, in order to write correctly in our canvas\n   */\n  static getOrientation(file: File, callback: (result: DOC_ORIENTATION) => void) {\n    const reader = new FileReader();\n    try {\n      reader.onload = function ($event) {\n        const view = new DataView(reader.result as ArrayBuffer);\n        if (view.getUint16(0, false) !== 0xFFD8) { return callback(-2); }\n        const length = view.byteLength;\n        let offset = 2;\n        while (offset < length) {\n          const marker = view.getUint16(offset, false);\n          offset += 2;\n          if (marker === 0xFFE1) {\n            if (view.getUint32(offset += 2, false) !== 0x45786966) { return callback(-1); }\n            const little = view.getUint16(offset += 6, false) === 0x4949;\n            offset += view.getUint32(offset + 4, little);\n            const tags = view.getUint16(offset, little);\n            offset += 2;\n            for (let i = 0; i < tags; i++) {\n              if (view.getUint16(offset + (i * 12), little) === 0x0112) {\n                return callback(view.getUint16(offset + (i * 12) + 8, little));\n              }\n            }\n          } else if ((marker & 0xFF00) !== 0xFF00) { break; } else { offset += view.getUint16(offset, false); }\n        }\n        return callback(-1);\n      };\n      reader.readAsArrayBuffer(file);\n    } catch (e) {\n      return callback(0);\n    }\n\n  }\n\n\n  /**\n   * return a promise with the new image data and image orientation\n   */\n  static uploadFile(render: Renderer2):Promise<{image: string, orientation: DOC_ORIENTATION}> {\n\n    const promise: Promise<{image: string, orientation: DOC_ORIENTATION}> = new Promise(function(resolve, reject) {\n\n      const inputElement = render.createElement('input');\n      render.setStyle(inputElement, 'display', 'none');\n      render.setProperty(inputElement, 'type', 'file');\n\n      render.listen(inputElement, 'click', ($event) => {\n        //console.log('MouseEvent:', $event);\n        //console.log('Input:', $event.target);\n        $event.target.value = null;\n      });\n\n\n      render.listen(inputElement, 'change', ($event) => {\n        const file: File = $event.target.files[0];\n\n        const myReader: FileReader = new FileReader();\n\n        myReader.onloadend = (e) => {\n          try {\n            ImageCompress.getOrientation(file, orientation => {\n              resolve({image:myReader.result as string, orientation});\n            });\n          } catch (e) {\n            //console.log(`ngx-image-compress error ${e}`);\n            reject(e);\n          }\n        };\n\n        try {\n          myReader.readAsDataURL(file);\n        } catch (e) {\n          console.warn(`ngx-image-compress - probably no file have been selected: ${e}`);\n          reject(\"No file selected\");\n        }\n\n      });\n      inputElement.click();\n\n    });\n\n    return promise;\n  }\n\n\n  static compress(imageDataUrlSource: string,\n                  orientation: DOC_ORIENTATION,\n                  render: Renderer2,\n                  ratio: number = 50,\n                  quality: number = 50): Promise<string> {\n\n    const promise: Promise<string> = new Promise(function(resolve, reject) {\n\n      quality = quality / 100;\n      ratio = ratio / 100;\n      const sourceImage = new Image();\n\n      // important for safari: we need to wait for onload event\n      sourceImage.onload = function () {\n        const canvas: HTMLCanvasElement = render.createElement('canvas');\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d');\n\n        let w, h;\n        w = sourceImage.naturalWidth;\n        h = sourceImage.naturalHeight;\n\n        if (orientation === DOC_ORIENTATION.Right || orientation === DOC_ORIENTATION.Left) {\n          const t = w;\n          w = h;\n          h = t;\n        }\n\n        canvas.width = w * ratio;\n        canvas.height = h * ratio;\n\n\n        const TO_RADIANS = Math.PI / 180;\n\n        if (orientation === DOC_ORIENTATION.Up) {\n\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n\n        } else if (orientation === DOC_ORIENTATION.Right) {\n\n          ctx.save();\n          ctx.rotate(90 * TO_RADIANS);\n          ctx.translate(0, -canvas.width);\n          ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n          ctx.restore();\n\n        } else if (orientation === DOC_ORIENTATION.Left) {\n\n          ctx.save();\n          ctx.rotate(-90 * TO_RADIANS);\n          ctx.translate(-canvas.width, 0);\n          ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n          ctx.restore();\n\n        } else if (orientation === DOC_ORIENTATION.Down) {\n\n          ctx.save();\n          ctx.rotate(180 * TO_RADIANS);\n          ctx.translate(-canvas.width, -canvas.height);\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n          ctx.restore();\n\n        } else {\n          //console.warn('ngx-image-compress - no orientation value found');\n          // same as default UP\n          ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n        }\n\n\n        const mime = imageDataUrlSource.substr(5, imageDataUrlSource.split(';')[0].length - 5);\n        // TODO test on mime\n        const result = canvas.toDataURL(mime, quality);\n\n        resolve(result);\n\n      };\n\n      sourceImage.src = imageDataUrlSource;\n\n    });\n\n    return promise;\n  }\n\n\n  /**\n   * helper to evaluate the compression rate\n   * @param s the image in base64 string format\n   */\n  static byteCount(s: string): number {\n    return encodeURI(s).split(/%..|./).length - 1;\n  }\n\n}\n","import {Injectable, Renderer2, RendererFactory2} from '@angular/core';\nimport {ImageCompress} from './image-compress';\nimport {DOC_ORIENTATION} from './DOC_ORIENTATION';\n\n@Injectable()\nexport class NgxImageCompressService {\n\n  private render: Renderer2;\n\n  public DOC_ORIENTATION = DOC_ORIENTATION;\n\n  constructor(rendererFactory: RendererFactory2) {\n    this.render = rendererFactory.createRenderer(null, null);\n  }\n\n  public byteCount(image) {\n    return ImageCompress.byteCount(image);\n  }\n\n  public uploadFile():Promise<{image: string, orientation: DOC_ORIENTATION}> {\n    return ImageCompress.uploadFile(this.render);\n  }\n\n  public compressFile(image, orientation, ratio: number = 50, quality: number = 50): Promise<string> {\n    return ImageCompress.compress(image, orientation, this.render, ratio, quality);\n  }\n\n}\n"]}