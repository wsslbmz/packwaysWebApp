import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { AutocompleteGroup } from './classes/AutocompleteGroup';
import { SelectedAutocompleteItem } from './classes/typing';
import { CompleterComponent } from './completer/completer.component';
import { GroupNoResult } from './utils/utils';
import { Subject } from 'rxjs';
export declare class NgAutoCompleteComponent implements OnInit {
    private cdr;
    completers: QueryList<CompleterComponent>;
    init: ElementRef;
    selected: EventEmitter<SelectedAutocompleteItem>;
    noResult: EventEmitter<GroupNoResult>;
    group: AutocompleteGroup[];
    key: string;
    classes: string[];
    _viewHasBeenInit: boolean;
    _viewInitSubject: Subject<boolean>;
    constructor(cdr: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     *
     */
    ngOnInit(): void;
    /**
     *
     */
    ngAfterViewChecked(): void;
    /**
     *
     */
    ListenToSelected(selected: SelectedAutocompleteItem): void;
    /**
     *
     */
    NoResult(group: GroupNoResult): void;
    /**
     *
     */
    InputCleared(key: string): void;
    /**
     *
     */
    SetChildren(selected: SelectedAutocompleteItem): void;
    /**
     *
     */
    TriggerChange(): void;
    /**
     *
     */
    GetInput(key: string): CompleterComponent;
    /**
     *
     */
    SubscribeInput(key: string, f: (completer: CompleterComponent) => void): void;
    /**
     *
     */
    ResetInput(key: string): void;
    /**
     *
     */
    SetValues(key: string, values: {
        id?: string | number;
        [value: string]: any;
    }[]): void;
    /**
     *
     */
    SetTemplate(key: string, type: 'noResults' | 'placeholderValue' | 'dropdownValue', template: TemplateRef<any>): void;
    /**
     *
     */
    SetAsync(key: string, promise: (str: string) => Promise<{
        id: string | number;
        [value: string]: any;
    }[]>): void;
    /**
     *
     */
    SelectItem(key: string, id: string | number): void;
    /**
     *
     */
    RemovableValues(key: string, ids: {
        id: string | number;
        [value: string]: any;
    }[]): void;
    /**
     *
     */
    ResetInputs(): void;
    /**
     *
     */
    static FindCompleter(key: string, list: QueryList<NgAutoCompleteComponent>): NgAutoCompleteComponent;
}
