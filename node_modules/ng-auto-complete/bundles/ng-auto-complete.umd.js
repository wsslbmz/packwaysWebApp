(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('rxjs'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ng-auto-complete', ['exports', '@angular/core', 'rxjs/operators', 'rxjs', '@angular/common', '@angular/forms'], factory) :
    (factory((global['ng-auto-complete'] = {}),global.ng.core,global.rxjs.operators,global.rxjs,global.ng.common,global.ng.forms));
}(this, (function (exports,core,operators,rxjs,common,forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AutocompleteItem = /** @class */ (function () {
        function AutocompleteItem(title, id, original) {
            this.title = title;
            this.id = id;
            this.original = original;
        }
        return AutocompleteItem;
    }());
    /**
     *
     * @param {?} items
     * @param {?} titleKey
     * @param {?=} childrenKey
     * @return {?}
     */
    function SearchableAutoCompleteItems(items, titleKey, childrenKey) {
        if (childrenKey === void 0) {
            childrenKey = null;
        }
        return items.reduce(function (r, i) {
            /** @type {?} */
            var t = SearchableAutoCompleteString(i[titleKey], i.id);
            if (typeof r[t] === 'undefined') {
                r[t] = TransformToAutocompleteItem(i, titleKey, childrenKey);
            }
            return r;
        }, {});
    }
    /**
     *
     * @param {?} key
     * @param {?} id
     * @return {?}
     */
    function SearchableAutoCompleteString(key, id) {
        return key.replace(/ /g, "_") + "_id_" + String(id);
    }
    /**
     *
     * @param {?} str
     * @return {?}
     */
    function ComparableAutoCompleteString(str) {
        return str.replace(/_/g, " ");
    }
    /**
     * object must have an ID
     * @param {?} object
     * @param {?} titleKey
     * @param {?=} childrenKey
     * @return {?}
     */
    function TransformToAutocompleteItem(object, titleKey, childrenKey) {
        if (childrenKey === void 0) {
            childrenKey = null;
        }
        /** @type {?} */
        var item = new AutocompleteItem(object[titleKey], object.id, object);
        /**
         * if there are children, add these.
         */
        if (childrenKey !== null)
            item.children = object[childrenKey];
        return item;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var UsedCodeList = {
        ArrowDown: 40,
        ArrowUp: 38,
        Enter: 13,
        Escape: 27,
        Tab: 9,
        MetaLeft: 91,
        AltLeft: 18,
        ControlLeft: 17,
        ShiftLeft: 16,
        ArrowLeft: 37,
        ArrowRight: 39,
        MetaRight: 93,
        AltRight: 18
    };
    /**
     *
     * @param {?} array
     * @return {?}
     */
    function ReturnStringArrayByID(array) {
        return array.reduce(function (result, item) {
            result.push(item.id.toString());
            return result;
        }, []);
    }
    /**
     *
     * @param {?} removals
     * @param {?} list
     * @return {?}
     */
    function FilterRemovals(removals, list) {
        return list.filter(function (item) {
            return removals.indexOf(item.id.toString()) <= -1;
        });
    }
    /**
     *
     * @return {?}
     */
    function IsMobileOrTablet() {
        /** @type {?} */
        var isMobile = false;
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
            isMobile = true;
        }
        return isMobile;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function NotUsedKey(code) {
        return typeof UsedCodeList[code] === 'undefined';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgDropdownDirective = /** @class */ (function () {
        function NgDropdownDirective(_eref) {
            this._eref = _eref;
            this.list = [];
            this.active = null;
            this.input = null;
            this.element = null;
            this.key = '';
            this.completion = true;
            this.hover = new core.EventEmitter();
            this.selected = new core.EventEmitter();
            this.closed = new core.EventEmitter();
            this._open = false;
            this._list = [];
            this._class = '';
        }
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.ngOnInit = /**
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this._class = "dr-item-" + this.key + "-";
                if (this.RefExists()) {
                    this.input.addEventListener('keydown', function (event) {
                        _this.keyDown(event);
                    });
                }
                if (!this.completion) {
                    document.addEventListener('keydown', function (event) {
                        if (_this._open) {
                            _this.keyDown(event);
                        }
                    });
                }
                if (!IsMobileOrTablet()) {
                    this._eref.nativeElement.addEventListener('mouseover', function (event) {
                        _this.OnMouseOver(event);
                    });
                }
                /**
                 *
                 */
                this.PrepareList();
            };
        /**
         *
         */
        /**
         *
         * @param {?} changes
         * @return {?}
         */
        NgDropdownDirective.prototype.ngOnChanges = /**
         *
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (typeof changes['active'] !== 'undefined' && !changes['active'].firstChange) {
                    this.PrepareList();
                }
                if (typeof changes['list'] !== 'undefined') {
                    this.list = changes['list'].currentValue;
                    /**
                     *
                     */
                    this.PrepareList();
                }
            };
        /**
         *
         */
        /**
         *
         * @param {?} event
         * @return {?}
         */
        NgDropdownDirective.prototype.keyDown = /**
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.stopImmediatePropagation();
                event.stopPropagation();
                /**
                 *
                 */
                switch (event.code) {
                    case 'ArrowDown':
                        this.Open();
                        /**
                         *
                         */
                        this.SetActive(this.FindActive() + 1);
                        this.DropdownFocusAreaDown();
                        event.preventDefault();
                        break;
                    case 'ArrowUp':
                        this.Open();
                        /**
                         *
                         */
                        this.SetActive(this.FindActive() - 1);
                        this.DropdownFocusAreaUp();
                        event.preventDefault();
                        break;
                    case 'Enter':
                        this.EmitSelected();
                        this.Close(null, true);
                        event.preventDefault();
                        break;
                    case 'Escape':
                        this.Close(null, true);
                        event.preventDefault();
                        break;
                    case 'Tab':
                        if (!event.shiftKey) {
                            this.EmitSelected();
                        }
                        this.Close(null, true);
                        break;
                    default:
                        return;
                }
            };
        /**
         *
         */
        /**
         *
         * @param {?} event
         * @return {?}
         */
        NgDropdownDirective.prototype.OnMouseOver = /**
         *
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // Mouse didn't actually move, so no logic needed.
                if (event.movementX == 0 && event.movementY == 0) {
                    return;
                }
                /**
                 *
                 * @type {?}
                 */
                var el = event.target || event.srcElement;
                if (el.id.length > 0 && el.id.includes(this._class)) {
                    this.SetActive(Number(el.id.slice(this._class.length, el.id.length)));
                }
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.EmitSelected = /**
         *
         * @return {?}
         */
            function () {
                if (this.FindActive() > -1) {
                    this.selected.emit(this._list[this.FindActive()].key);
                }
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.DropdownFocusAreaDown = /**
         *
         * @return {?}
         */
            function () {
                /** @type {?} */
                var scroll = this._eref.nativeElement.offsetHeight + this._eref.nativeElement.scrollTop;
                /**
                 *
                 */
                if ((this.GetElement(this.FindActive()).offsetTop + this.GetElement(this.FindActive()).offsetHeight) > scroll) {
                    this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop - (this._eref.nativeElement.offsetHeight - this.GetElement(this.FindActive()).offsetHeight);
                }
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.DropdownFocusAreaUp = /**
         *
         * @return {?}
         */
            function () {
                /** @type {?} */
                var scroll = this._eref.nativeElement.scrollTop;
                /**
                 *
                 */
                if (this.GetElement(this.FindActive()).offsetTop < scroll && scroll > 0) {
                    this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop;
                }
            };
        Object.defineProperty(NgDropdownDirective.prototype, "opened", {
            // =======================================================================//
            // ! Bindings                                                             //
            // =======================================================================//
            /**
             *
             */
            get: 
            // =======================================================================//
            // ! Bindings                                                             //
            // =======================================================================//
            /**
             *
             * @return {?}
             */
            function () {
                return this._open;
            },
            enumerable: true,
            configurable: true
        });
        // =======================================================================//
        // ! Listeners                                                            //
        // =======================================================================//
        /**
         *
         */
        // =======================================================================//
        // ! Listeners                                                            //
        // =======================================================================//
        /**
         *
         * @param {?} event
         * @param {?=} force
         * @return {?}
         */
        NgDropdownDirective.prototype.Close =
            // =======================================================================//
            // ! Listeners                                                            //
            // =======================================================================//
            /**
             *
             * @param {?} event
             * @param {?=} force
             * @return {?}
             */
            function (event, force) {
                var _this = this;
                if (force === void 0) {
                    force = false;
                }
                if (!this._open) {
                    return;
                }
                /** @type {?} */
                var close = function () {
                    _this._open = false;
                    /**
                     * Emit NULL so listening components know what to do.
                     */
                    _this.ClearActive();
                    _this.hover.emit(null);
                    _this.closed.emit();
                };
                if (force) {
                    close();
                    return;
                }
                if ((this._open && (!this.element.contains(event.target)))) {
                    close();
                }
            };
        // =======================================================================//
        // ! Utils                                                                //
        // =======================================================================//
        /**
         *
         */
        // =======================================================================//
        // ! Utils                                                                //
        // =======================================================================//
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.Open =
            // =======================================================================//
            // ! Utils                                                                //
            // =======================================================================//
            /**
             *
             * @return {?}
             */
            function () {
                var _this = this;
                setTimeout(function () {
                    if (!_this._open && !_this._eref.nativeElement.classList.contains('is-initial-empty')) {
                        _this._open = true;
                        _this.PrepareList();
                        /**
                         *
                         */
                        if (_this.FindActive() < 0) {
                            _this._eref.nativeElement.scrollTop = 0;
                        }
                        else {
                            _this._eref.nativeElement.scrollTop = _this.GetElement(_this.FindActive()).offsetHeight * _this.FindActive();
                        }
                    }
                }, 0);
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.RefExists = /**
         *
         * @return {?}
         */
            function () {
                return typeof this.input !== 'undefined';
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.FindActive = /**
         *
         * @return {?}
         */
            function () {
                return this._list.reduce(function (result, item, index) {
                    if (item.active) {
                        result = index;
                    }
                    return result;
                }, -1);
            };
        /**
         *
         */
        /**
         *
         * @param {?} index
         * @return {?}
         */
        NgDropdownDirective.prototype.SetActive = /**
         *
         * @param {?} index
         * @return {?}
         */
            function (index) {
                if (index > this._list.length - 1 || index < 0)
                    return;
                /**
                 *
                 */
                this.ClearActive();
                this._list[index].active = true;
                this.hover.emit(this._list[index].key);
                /**
                 *
                 */
                this.GetElement(index).classList.add('active');
            };
        /**
         *
         */
        /**
         *
         * @param {?} index
         * @return {?}
         */
        NgDropdownDirective.prototype.GetElement = /**
         *
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return this._eref.nativeElement.children[index];
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.ClearActive = /**
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this._list.forEach(function (item, index) {
                    item.active = false;
                    /**
                     *
                     */
                    _this.GetElement(index).classList.remove('active');
                });
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.PrepareList = /**
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this._list = Object.keys(this.list).map(function (key) {
                    return {
                        key: key,
                        active: _this.ActiveItem(key)
                    };
                });
                /**
                 *
                 */
                this.PrepareChildrenList();
            };
        /**
         *
         */
        /**
         *
         * @param {?} item
         * @return {?}
         */
        NgDropdownDirective.prototype.ActiveItem = /**
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.active !== null && item === this.active;
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.DetermineActiveClass = /**
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this._list.forEach(function (item, index) {
                    if (typeof _this.GetElement(index) === 'undefined') {
                        return;
                    }
                    /**
                     *
                     */
                    _this.GetElement(index).classList.remove('active');
                    if (item.active)
                        _this.GetElement(index).classList.add('active');
                });
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.PrepareChildrenList = /**
         *
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var list = this._eref.nativeElement.children;
                setTimeout(function () {
                    for (var i = 0; i < list.length; i++) {
                        list[i].id = _this._class + i;
                    }
                }, 0);
                /**
                 *
                 */
                this.DetermineActiveClass();
            };
        /**
         *
         */
        /**
         *
         * @param {?} object
         * @return {?}
         */
        NgDropdownDirective.prototype.DeReference = /**
         *
         * @param {?} object
         * @return {?}
         */
            function (object) {
                var item = object.item;
                /**
                 *
                 */
                return Object.assign({}, __assign({}, item));
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgDropdownDirective.prototype.ngOnDestroy = /**
         *
         * @return {?}
         */
            function () {
                if (this.RefExists()) {
                    this.wheelHandler = this.removeEventListner.bind(this.input);
                    // this.input.removeEventListener('keydown');
                }
                if (!this.completion) {
                    this.wheelHandler = this.removeEventListner.bind(document);
                    // document.removeEventListener('keydown');
                }
                if (!IsMobileOrTablet()) {
                    this.wheelHandler = this.removeEventListner.bind(this._eref);
                    // this._eref.nativeElement.removeEventListener('mouseover');
                }
            };
        /**
         * @param {?} elem
         * @return {?}
         */
        NgDropdownDirective.prototype.removeEventListner = /**
         * @param {?} elem
         * @return {?}
         */
            function (elem) {
                elem.removeEventListener('wheel', this.wheelHandler, true);
            };
        NgDropdownDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngDropdown]'
                    },] }
        ];
        /** @nocollapse */
        NgDropdownDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        NgDropdownDirective.propDecorators = {
            list: [{ type: core.Input }],
            active: [{ type: core.Input }],
            input: [{ type: core.Input }],
            element: [{ type: core.Input }],
            key: [{ type: core.Input }],
            completion: [{ type: core.Input }],
            hover: [{ type: core.Output }],
            selected: [{ type: core.Output }],
            closed: [{ type: core.Output }],
            opened: [{ type: core.HostBinding, args: ['class.open',] }],
            Close: [{ type: core.HostListener, args: ['document:click', ['$event'],] }]
        };
        return NgDropdownDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CompleterComponent = /** @class */ (function () {
        function CompleterComponent(_zone) {
            this._zone = _zone;
            this.cleared = new core.EventEmitter();
            this.selected = new core.EventEmitter();
            this.noResult = new core.EventEmitter();
            this.group = ( /** @type {?} */({}));
            this._change = new rxjs.Subject();
            this._items = {};
            this._completer = '';
            this._highlight = '';
            this._DOM = {
                notFound: ( /** @type {?} */(false)),
                empty: ( /** @type {?} */(false)),
                placeholder: ( /** @type {?} */(null)),
                selected: ( /** @type {?} */('')),
                isLoading: ( /** @type {?} */(false))
            };
        }
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.ngOnInit = /**
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this._zone.runOutsideAngular(function () {
                    _this._change.pipe(operators.debounceTime(300))
                        .subscribe(function (value) {
                        _this._zone.run(function () {
                            if (_this.group.async !== null) {
                                _this.RunAsyncFunction(value);
                            }
                            else {
                                _this.OnModelChange(value);
                            }
                        });
                    });
                });
                this.SetItems();
            };
        /**
         * Only used when completion is off.
         */
        /**
         * Only used when completion is off.
         * @return {?}
         */
        CompleterComponent.prototype.RegisterClick = /**
         * Only used when completion is off.
         * @return {?}
         */
            function () {
                if (!this.group.completion) {
                    this.SwitchDropdownState();
                }
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.DropdownArray = /**
         *
         * @return {?}
         */
            function () {
                if (this.group.completion) {
                    this.SwitchDropdownState();
                }
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.SwitchDropdownState = /**
         *
         * @return {?}
         */
            function () {
                if (this.dropdown._open) {
                    this.CloseDropdown();
                    return;
                }
                /**
                 *
                 */
                this.OpenDropdown();
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.CloseDropdown = /**
         *
         * @return {?}
         */
            function () {
                this.dropdown._open = false;
                /**
                 *
                 */
                this._DOM.placeholder = null;
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.OpenDropdown = /**
         *
         * @return {?}
         */
            function () {
                this.dropdown.Open();
                /**
                 *
                 */
                this._DOM.placeholder = null;
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.SetItems = /**
         *
         * @return {?}
         */
            function () {
                this._items = this.group.value;
                this.IsInitialEmpty();
            };
        /**
         *
         */
        /**
         *
         * @param {?} item
         * @return {?}
         */
        CompleterComponent.prototype.SelectItem = /**
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var i;
                if (typeof item === 'string') {
                    i = this._items[item];
                    this._DOM.selected = item;
                }
                else {
                    i = item;
                    this._DOM.selected = SearchableAutoCompleteString(item.title, item.id);
                }
                this._completer = i.title;
                this._highlight = '';
                this.dropdown.Close(null, true);
                this.selected.emit({ group: { key: this.group.key }, item: i });
            };
        /**
         *
         */
        /**
         *
         * @param {?} value
         * @return {?}
         */
        CompleterComponent.prototype.RunAsyncFunction = /**
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return __awaiter(this, void 0, void 0, function () {
                    var values;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this._completer = value;
                                this._highlight = value;
                                this._DOM.selected = null;
                                if (!(value.length === 0))
                                    return [3 /*break*/, 1];
                                this.group.InitialValue();
                                this.ClearModel();
                                this.dropdown.Close('', true);
                                return [3 /*break*/, 3];
                            case 1:
                                if (!(value.length > this.group.searchLength))
                                    return [3 /*break*/, 3];
                                this._DOM.isLoading = true;
                                return [4 /*yield*/, this.group.async(value)];
                            case 2:
                                values = _a.sent();
                                this.group.SetNewValue(values, this.group.keys.titleKey);
                                this._DOM.isLoading = false;
                                this._items = this.group.value;
                                this.EmptySearch(this._items, value);
                                // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
                                this.IsInitialEmpty();
                                this.dropdown.Open();
                                _a.label = 3;
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         *
         */
        /**
         *
         * @param {?} value
         * @return {?}
         */
        CompleterComponent.prototype.OnModelChange = /**
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._completer = value;
                this._highlight = value;
                this._DOM.selected = null;
                if (value.length === 0) {
                    this.ClearModel();
                    this.dropdown.Close('', true);
                }
                else if (value.length > this.group.searchLength) {
                    this.CompareItemsAndSet(value);
                }
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.ClearModel = /**
         *
         * @return {?}
         */
            function () {
                this._DOM.selected = null;
                this._DOM.notFound = false;
                this.cleared.emit(this.group.key);
            };
        /**
         *
         */
        /**
         *
         * @param {?} value
         * @return {?}
         */
        CompleterComponent.prototype.CompareItemsAndSet = /**
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var obj = {};
                for (var key in this.group.value) {
                    if (ComparableAutoCompleteString(key).toLowerCase().indexOf(value.toLowerCase()) > -1) {
                        obj[key] = this.group.value[key];
                    }
                }
                this._items = obj;
                this.EmptySearch(this._items, value);
                // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
                this.IsInitialEmpty();
                this.dropdown.Open();
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.OnInputBlurred = /**
         *
         * @return {?}
         */
            function () {
                if (!this.HasChosenValue()) {
                    /**
                     * Let component know completer input has been cleared -
                     * this function shows the list again, also resets children, if chosen.
                     */
                    this.OnModelChange('');
                }
            };
        /**
         *
         */
        /**
         *
         * @param {?} item
         * @return {?}
         */
        CompleterComponent.prototype.OnHoverDropdownItem = /**
         *
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (typeof item == 'string') {
                    this._DOM.placeholder = this._items[item];
                    return;
                }
                if (item == null) {
                    this._DOM.placeholder = null;
                    return;
                }
                this._DOM.placeholder = item;
            };
        // =======================================================================//
        // ! Utils                                                                //
        // =======================================================================//
        // =======================================================================//
        // ! Utils                                                                //
        // =======================================================================//
        /**
         * @return {?}
         */
        CompleterComponent.prototype.IsInitialEmpty =
            // =======================================================================//
            // ! Utils                                                                //
            // =======================================================================//
            /**
             * @return {?}
             */
            function () {
                if (Object.keys(this._items).length === 0 && this._completer.length === 0) {
                    this._DOM.empty = true;
                    return;
                }
                this._DOM.empty = false;
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.HasChosenValue = /**
         *
         * @return {?}
         */
            function () {
                return this._DOM.selected !== null;
            };
        /**
         *
         */
        /**
         *
         * @param {?} obj
         * @param {?} query
         * @return {?}
         */
        CompleterComponent.prototype.EmptySearch = /**
         *
         * @param {?} obj
         * @param {?} query
         * @return {?}
         */
            function (obj, query) {
                if (Object.keys(obj).length > 0) {
                    this._DOM.notFound = false;
                    return;
                }
                this._DOM.notFound = true;
                this.noResult.emit({ group: { key: this.group.key }, query: query });
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        CompleterComponent.prototype.ClearValue = /**
         *
         * @return {?}
         */
            function () {
                this._completer = '';
                this._DOM.selected = null;
                this.group.InitialValue();
                this.IsInitialEmpty();
                /**
                 *
                 */
                this.selected.emit({ group: { key: this.group.key }, item: null });
            };
        CompleterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-completer',
                        template: "\n        <div #element class=\"ng-autocomplete-dropdown\"\n             [ngClass]=\"{'open': dropdown._open, 'is-loading': _DOM.isLoading, 'is-async': group.async !== null}\">\n\n            <!--GROUP: {{group.key}}-->\n\n            <div class=\"ng-autocomplete-inputs\" (click)=\"RegisterClick()\"\n                 [ngClass]=\"{'completion-off': !group.completion}\">\n                <span class=\"ng-autocomplete-placeholder\"\n                      *ngIf=\"_DOM.placeholder\">\n                  <ng-container *ngIf=\"group.placeholderValue\">\n                      <ng-template *ngTemplateOutlet=\"group.placeholderValue; context: {$implicit: _DOM.placeholder}\"></ng-template>\n                  </ng-container>\n                  <ng-template [ngIf]=\"!group.placeholderValue\">\n                      {{_DOM.placeholder.title}}\n                  </ng-template>\n                </span>\n                <input #input type=\"text\" [placeholder]=\"group.placeholder\" name=\"completer\" [(ngModel)]=\"_completer\"\n                       (ngModelChange)=\"_change.next($event);\"\n                       [value]=\"_completer\"\n                       autocomplete=\"off\"\n                       (click)=\"OpenDropdown()\"\n                       (focus)=\"OpenDropdown()\" class=\"ng-autocomplete-input\">\n\n                <span [ngClass]=\"{'open': dropdown._open}\" class=\"ng-autocomplete-dropdown-icon\"\n                      (click)=\"DropdownArray()\"></span>\n            </div>\n\n            <div class=\"ng-dropdown\" ngDropdown [list]=\"_items\" [element]=\"element\" [input]=\"input\"\n                 [ngClass]=\"{'is-initial-empty': _DOM.empty}\"\n                 [active]=\"_DOM.selected\" [key]=\"group.key\"\n                 [completion]=\"group.completion\"\n                 (hover)=\"OnHoverDropdownItem($event)\"\n                 (selected)=\"SelectItem($event)\"\n                 (closed)=\"OnInputBlurred()\"\n            >\n                <div *ngIf=\"_DOM.notFound && group.noResults\" class=\"dropdown-item no-results\">\n                    <ng-container *ngIf=\"group.noResults\">\n                        <ng-template *ngTemplateOutlet=\"group.noResults; context: {$implicit: _completer}\"></ng-template>\n                    </ng-container>\n                </div>\n\n                <div class=\"dropdown-item\" *ngFor=\"let item of _items | keys; let i = index\"\n                     (click)=\"SelectItem(_items[item])\">\n\n                    <ng-container *ngIf=\"group.dropdownValue\">\n                        <ng-template\n                            *ngTemplateOutlet=\"group.dropdownValue; context: {$implicit: _items[item], highlight: _items[item].title | highlight:_highlight}\"></ng-template>\n                    </ng-container>\n\n                    <div *ngIf=\"!group.dropdownValue\" [innerHTML]=\"_items[item].title | highlight:_highlight\"></div>\n                </div>\n            </div>\n        </div>",
                        styles: ["\n        .ng-autocomplete-inputs {\n            position: relative;\n        }\n\n        .ng-autocomplete-inputs.completion-off {\n            cursor: pointer;\n        }\n\n        .ng-autocomplete-inputs.completion-off input {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-placeholder {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-dropdown-icon {\n\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.is-empty {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.open {\n            display: block;\n        }\n    "]
                    }] }
        ];
        /** @nocollapse */
        CompleterComponent.ctorParameters = function () {
            return [
                { type: core.NgZone }
            ];
        };
        CompleterComponent.propDecorators = {
            dropdown: [{ type: core.ViewChild, args: [NgDropdownDirective,] }],
            cleared: [{ type: core.Output }],
            selected: [{ type: core.Output }],
            noResult: [{ type: core.Output, args: ['no-result',] }],
            group: [{ type: core.Input }]
        };
        return CompleterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAutoCompleteComponent = /** @class */ (function () {
        function NgAutoCompleteComponent(cdr) {
            this.cdr = cdr;
            this.selected = new core.EventEmitter();
            this.noResult = new core.EventEmitter();
            this.group = [];
            this.key = '';
            this.classes = [];
            this._viewHasBeenInit = false;
            this._viewInitSubject = new rxjs.Subject();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.ngOnInit = /**
         *
         * @return {?}
         */
            function () {
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.ngAfterViewChecked = /**
         *
         * @return {?}
         */
            function () {
                if (!this._viewHasBeenInit) {
                    /** @type {?} */
                    var el = this.init.nativeElement.querySelector('.after-view-init');
                    if (window.getComputedStyle(el).length > 0) {
                        this._viewHasBeenInit = true;
                        this._viewInitSubject.next(true);
                    }
                }
            };
        /**
         *
         */
        /**
         *
         * @param {?} selected
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.ListenToSelected = /**
         *
         * @param {?} selected
         * @return {?}
         */
            function (selected) {
                this.selected.emit(selected);
                /**
                 *
                 */
                this.SetChildren(selected);
            };
        /**
         *
         */
        /**
         *
         * @param {?} group
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.NoResult = /**
         *
         * @param {?} group
         * @return {?}
         */
            function (group) {
                this.noResult.emit(group);
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.InputCleared = /**
         *
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                this.group.forEach(function (group) {
                    if (group.key === key || group.parent === key) {
                        _this.ResetInput(group.key);
                    }
                });
                /**
                 * Items may have changed, need to te re-set list in completer components.
                 */
                this.TriggerChange();
            };
        /**
         *
         */
        /**
         *
         * @param {?} selected
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.SetChildren = /**
         *
         * @param {?} selected
         * @return {?}
         */
            function (selected) {
                var _this = this;
                this.group.forEach(function (item) {
                    if (item.parent == selected.group.key) {
                        _this.ResetInput(item.key);
                        /**
                         *
                         */
                        if (selected.item !== null && typeof selected.item.children !== 'undefined') {
                            item.SetNewValue(selected.item.children, selected.group.keys.titleKey);
                        }
                    }
                });
                /**
                 * Items may have changed, need to te re-set list in completer components.
                 */
                this.TriggerChange();
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.TriggerChange = /**
         *
         * @return {?}
         */
            function () {
                this.completers.forEach(function (completer) {
                    completer.SetItems();
                });
            };
        // =======================================================================//
        // ! Utils                                                                //
        // =======================================================================//
        /**
         *
         */
        // =======================================================================//
        // ! Utils                                                                //
        // =======================================================================//
        /**
         *
         * @param {?} key
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.GetInput =
            // =======================================================================//
            // ! Utils                                                                //
            // =======================================================================//
            /**
             *
             * @param {?} key
             * @return {?}
             */
            function (key) {
                return this.completers.reduce(function (result, completer) {
                    if (completer.group.key === key) {
                        result = completer;
                    }
                    return result;
                }, ( /** @type {?} */({})));
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @param {?} f
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.SubscribeInput = /**
         *
         * @param {?} key
         * @param {?} f
         * @return {?}
         */
            function (key, f) {
                var _this = this;
                if (this._viewHasBeenInit) {
                    /** @type {?} */
                    var completer = this.GetInput(key);
                    /**
                     *
                     */
                    f(completer);
                    return;
                }
                this._viewInitSubject.subscribe(function (_bool) {
                    /** @type {?} */
                    var completer = _this.GetInput(key);
                    setTimeout(function () {
                        f(completer);
                    });
                    _this._viewInitSubject.unsubscribe();
                });
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.ResetInput = /**
         *
         * @param {?} key
         * @return {?}
         */
            function (key) {
                this.SubscribeInput(key, function (completer) {
                    completer.ClearValue();
                });
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @param {?} values
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.SetValues = /**
         *
         * @param {?} key
         * @param {?} values
         * @return {?}
         */
            function (key, values) {
                var _this = this;
                this.SubscribeInput(key, function (completer) {
                    completer.group.SetValues(values);
                    /**
                     * Items may have changed, need to te re-set list in completer components.
                     */
                    _this.TriggerChange();
                });
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @param {?} type
         * @param {?} template
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.SetTemplate = /**
         *
         * @param {?} key
         * @param {?} type
         * @param {?} template
         * @return {?}
         */
            function (key, type, template) {
                var _this = this;
                this.SubscribeInput(key, function (completer) {
                    completer.group[type] = template;
                    /**
                     * Items may have changed, need to te re-set list in completer components.
                     */
                    _this.TriggerChange();
                });
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @param {?} promise
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.SetAsync = /**
         *
         * @param {?} key
         * @param {?} promise
         * @return {?}
         */
            function (key, promise) {
                var _this = this;
                this.SubscribeInput(key, function (completer) {
                    completer.group.async = promise;
                    /**
                     * Items may have changed, need to te re-set list in completer components.
                     */
                    _this.TriggerChange();
                });
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @param {?} id
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.SelectItem = /**
         *
         * @param {?} key
         * @param {?} id
         * @return {?}
         */
            function (key, id) {
                this.SubscribeInput(key, function (completer) {
                    Object.keys(completer._items).forEach(function (key) {
                        /** @type {?} */
                        var f = "_id_" + String(id);
                        /** @type {?} */
                        var c = key.substring(key.indexOf(f), key.length);
                        if (f === c) {
                            completer.SelectItem(completer._items[key]);
                        }
                    });
                });
            };
        /**
         *
         */
        /**
         *
         * @param {?} key
         * @param {?} ids
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.RemovableValues = /**
         *
         * @param {?} key
         * @param {?} ids
         * @return {?}
         */
            function (key, ids) {
                var _this = this;
                this.SubscribeInput(key, function (completer) {
                    completer.group.Removables(ReturnStringArrayByID(ids));
                    /**
                     * Items may have changed, need to te re-set list in completer components.
                     */
                    _this.TriggerChange();
                });
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        NgAutoCompleteComponent.prototype.ResetInputs = /**
         *
         * @return {?}
         */
            function () {
                var _this = this;
                this.group.forEach(function (item) {
                    _this.ResetInput(item.key);
                });
            };
        // =======================================================================//
        // ! Static (utils)                                                       //
        // =======================================================================//
        /**
         *
         */
        // =======================================================================//
        // ! Static (utils)                                                       //
        // =======================================================================//
        /**
         *
         * @param {?} key
         * @param {?} list
         * @return {?}
         */
        NgAutoCompleteComponent.FindCompleter =
            // =======================================================================//
            // ! Static (utils)                                                       //
            // =======================================================================//
            /**
             *
             * @param {?} key
             * @param {?} list
             * @return {?}
             */
            function (key, list) {
                /** @type {?} */
                var completer = list.filter(function (completer) {
                    return key === completer.key;
                });
                if (typeof completer[0] !== 'undefined') {
                    return completer[0];
                }
                return null;
            };
        NgAutoCompleteComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-auto-complete',
                        template: "\n        <div #init style=\"display: none;\"><span class=\"after-view-init\"></span></div>\n        <ng-completer [ngClass]=\"classes\" *ngFor=\"let item of group\" (cleared)=\"InputCleared($event)\"\n                      (no-result)=\"NoResult($event)\"\n                      (selected)=\"ListenToSelected($event)\"\n                      [group]=\"item\"></ng-completer>\n    "
                    }] }
        ];
        /** @nocollapse */
        NgAutoCompleteComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        NgAutoCompleteComponent.propDecorators = {
            completers: [{ type: core.ViewChildren, args: [CompleterComponent,] }],
            init: [{ type: core.ViewChild, args: ['init',] }],
            selected: [{ type: core.Output }],
            noResult: [{ type: core.Output, args: ['no-result',] }],
            group: [{ type: core.Input }],
            key: [{ type: core.Input }],
            classes: [{ type: core.Input }]
        };
        return NgAutoCompleteComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HighlightPipe = /** @class */ (function () {
        function HighlightPipe() {
        }
        /**
         * @param {?} text
         * @param {?} search
         * @return {?}
         */
        HighlightPipe.prototype.transform = /**
         * @param {?} text
         * @param {?} search
         * @return {?}
         */
            function (text, search) {
                if (typeof search === 'undefined') {
                    return text;
                }
                /** @type {?} */
                var pattern = search.replace(/[\-\[\]\/{}()*+?.\\^$|]/g, '\\$&');
                pattern = pattern.split(' ').filter(function (t) { return t.length > 0; }).join('|');
                /**
                 *
                 */
                return text.replace(new RegExp(pattern, 'gi'), function (match) { return "<span class=\"dropdown-item-highlight\">" + match + "</span>"; });
            };
        HighlightPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'highlight'
                    },] }
        ];
        return HighlightPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var KeyValuePipe = /** @class */ (function () {
        function KeyValuePipe() {
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        KeyValuePipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
            function (value, args) {
                /** @type {?} */
                var keys = [];
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        keys.push(key);
                    }
                }
                return keys;
            };
        KeyValuePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'keys'
                    },] }
        ];
        return KeyValuePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PipeModule = /** @class */ (function () {
        function PipeModule() {
        }
        /**
         * @return {?}
         */
        PipeModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: PipeModule,
                    providers: [],
                };
            };
        PipeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [HighlightPipe, KeyValuePipe],
                        exports: [HighlightPipe, KeyValuePipe],
                    },] }
        ];
        return PipeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgAutoCompleteModule = /** @class */ (function () {
        function NgAutoCompleteModule() {
        }
        NgAutoCompleteModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            PipeModule.forRoot()
                        ],
                        exports: [
                            NgAutoCompleteComponent,
                            CompleterComponent,
                        ],
                        declarations: [
                            NgAutoCompleteComponent,
                            CompleterComponent,
                            NgDropdownDirective
                        ]
                    },] }
        ];
        return NgAutoCompleteModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AutocompleteGroup = /** @class */ (function () {
        function AutocompleteGroup() {
            this.async = null;
            this.removals = [];
        }
        /**
         *
         */
        /**
         *
         * @param {?} value
         * @param {?} titleKey
         * @return {?}
         */
        AutocompleteGroup.prototype.SetNewValue = /**
         *
         * @param {?} value
         * @param {?} titleKey
         * @return {?}
         */
            function (value, titleKey) {
                /** @type {?} */
                var values = SearchableAutoCompleteItems(value, titleKey);
                this.SetCopy(values);
                /**
                 *
                 */
                this.value = this.FilterRemovals(this.removals, values);
            };
        /**
         *
         */
        /**
         *
         * @param {?} ids
         * @return {?}
         */
        AutocompleteGroup.prototype.Removables = /**
         *
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                this.removals = ids;
                /**
                 *
                 */
                this.value = this.FilterRemovals(this.removals, this._copy);
            };
        /**
         *
         */
        /**
         *
         * @return {?}
         */
        AutocompleteGroup.prototype.InitialValue = /**
         *
         * @return {?}
         */
            function () {
                this.value = this.FilterRemovals(this.removals, this.initialValue);
                /**
                 *
                 */
                this.SetCopy(this.initialValue);
            };
        /**
         *
         */
        /**
         *
         * @param {?} values
         * @return {?}
         */
        AutocompleteGroup.prototype.SetCopy = /**
         *
         * @param {?} values
         * @return {?}
         */
            function (values) {
                this._copy = Object.assign([], values);
            };
        /**
         *
         */
        /**
         *
         * @param {?} value
         * @return {?}
         */
        AutocompleteGroup.prototype.SetValues = /**
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = SearchableAutoCompleteItems(value, this.keys.titleKey, this.keys.childrenKey);
                /**
                 *
                 */
                this.initialValue = Object.assign({}, this.value);
                this.SetCopy(Object.assign({}, this.value));
            };
        /**
         *
         */
        /**
         *
         * @param {?} removals
         * @param {?} value
         * @return {?}
         */
        AutocompleteGroup.prototype.FilterRemovals = /**
         *
         * @param {?} removals
         * @param {?} value
         * @return {?}
         */
            function (removals, value) {
                /** @type {?} */
                var filtered = Object.assign({}, value);
                /** @type {?} */
                var key;
                /** @type {?} */
                var keys = [];
                for (key in filtered) {
                    if (filtered.hasOwnProperty(key)) {
                        removals.forEach(function (id) {
                            // Comparable string and ID
                            /** @type {?} */
                            var f = "_id_" + String(id);
                            /** @type {?} */
                            var c = key.substring(key.indexOf(f), key.length);
                            if (f === c) {
                                keys.push(key);
                            }
                        });
                    }
                }
                keys.forEach(function (k) {
                    delete filtered[k];
                });
                return filtered;
            };
        return AutocompleteGroup;
    }());
    /**
     *
     * @template T
     * @param {?} placeholder
     * @param {?} key
     * @param {?} value
     * @param {?} keys
     * @param {?=} parent
     * @param {?=} completion
     * @param {?=} searchLength
     * @return {?}
     */
    function CreateNewAutocompleteGroup(placeholder, key, value, keys, parent, completion, searchLength) {
        if (parent === void 0) {
            parent = '';
        }
        if (completion === void 0) {
            completion = true;
        }
        if (searchLength === void 0) {
            searchLength = 2;
        }
        /** @type {?} */
        var group = new AutocompleteGroup();
        group.key = key;
        group.keys = keys;
        group.placeholder = placeholder;
        group.parent = parent;
        group.completion = completion;
        group.searchLength = searchLength;
        /**
         * Initial value needed, if we empty search box or want to clear it, it needs to be reset.
         * Setting copy, used if user wants to remove values (by id.). This _ list gets filtered.
         */
        group.SetValues(value);
        return group;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgAutoCompleteComponent = NgAutoCompleteComponent;
    exports.NgAutoCompleteModule = NgAutoCompleteModule;
    exports.PipeModule = PipeModule;
    exports.SearchableAutoCompleteItems = SearchableAutoCompleteItems;
    exports.SearchableAutoCompleteString = SearchableAutoCompleteString;
    exports.ComparableAutoCompleteString = ComparableAutoCompleteString;
    exports.TransformToAutocompleteItem = TransformToAutocompleteItem;
    exports.AutocompleteItem = AutocompleteItem;
    exports.CreateNewAutocompleteGroup = CreateNewAutocompleteGroup;
    exports.AutocompleteGroup = AutocompleteGroup;
    exports.ReturnStringArrayByID = ReturnStringArrayByID;
    exports.FilterRemovals = FilterRemovals;
    exports.IsMobileOrTablet = IsMobileOrTablet;
    exports.NotUsedKey = NotUsedKey;
    exports.ɵa = CompleterComponent;
    exports.ɵb = NgDropdownDirective;
    exports.ɵc = HighlightPipe;
    exports.ɵd = KeyValuePipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,