/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output } from "@angular/core";
import { IsMobileOrTablet } from "../utils/utils";
var NgDropdownDirective = /** @class */ (function () {
    function NgDropdownDirective(_eref) {
        this._eref = _eref;
        this.list = [];
        this.active = null;
        this.input = null;
        this.element = null;
        this.key = '';
        this.completion = true;
        this.hover = new EventEmitter();
        this.selected = new EventEmitter();
        this.closed = new EventEmitter();
        this._open = false;
        this._list = [];
        this._class = '';
    }
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.ngOnInit = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._class = "dr-item-" + this.key + "-";
        if (this.RefExists()) {
            this.input.addEventListener('keydown', function (event) {
                _this.keyDown(event);
            });
        }
        if (!this.completion) {
            document.addEventListener('keydown', function (event) {
                if (_this._open) {
                    _this.keyDown(event);
                }
            });
        }
        if (!IsMobileOrTablet()) {
            this._eref.nativeElement.addEventListener('mouseover', function (event) {
                _this.OnMouseOver(event);
            });
        }
        /**
         *
         */
        this.PrepareList();
    };
    /**
     *
     */
    /**
     *
     * @param {?} changes
     * @return {?}
     */
    NgDropdownDirective.prototype.ngOnChanges = /**
     *
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (typeof changes['active'] !== 'undefined' && !changes['active'].firstChange) {
            this.PrepareList();
        }
        if (typeof changes['list'] !== 'undefined') {
            this.list = changes['list'].currentValue;
            /**
             *
             */
            this.PrepareList();
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} event
     * @return {?}
     */
    NgDropdownDirective.prototype.keyDown = /**
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        /**
         *
         */
        switch (event.code) {
            case 'ArrowDown':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() + 1);
                this.DropdownFocusAreaDown();
                event.preventDefault();
                break;
            case 'ArrowUp':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() - 1);
                this.DropdownFocusAreaUp();
                event.preventDefault();
                break;
            case 'Enter':
                this.EmitSelected();
                this.Close(null, true);
                event.preventDefault();
                break;
            case 'Escape':
                this.Close(null, true);
                event.preventDefault();
                break;
            case 'Tab':
                if (!event.shiftKey) {
                    this.EmitSelected();
                }
                this.Close(null, true);
                break;
            default:
                return;
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} event
     * @return {?}
     */
    NgDropdownDirective.prototype.OnMouseOver = /**
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Mouse didn't actually move, so no logic needed.
        if (event.movementX == 0 && event.movementY == 0) {
            return;
        }
        /**
         *
         * @type {?}
         */
        var el = event.target || event.srcElement;
        if (el.id.length > 0 && el.id.includes(this._class)) {
            this.SetActive(Number(el.id.slice(this._class.length, el.id.length)));
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.EmitSelected = /**
     *
     * @return {?}
     */
    function () {
        if (this.FindActive() > -1) {
            this.selected.emit(this._list[this.FindActive()].key);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.DropdownFocusAreaDown = /**
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scroll = this._eref.nativeElement.offsetHeight + this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if ((this.GetElement(this.FindActive()).offsetTop + this.GetElement(this.FindActive()).offsetHeight) > scroll) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop - (this._eref.nativeElement.offsetHeight - this.GetElement(this.FindActive()).offsetHeight);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.DropdownFocusAreaUp = /**
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scroll = this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if (this.GetElement(this.FindActive()).offsetTop < scroll && scroll > 0) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop;
        }
    };
    Object.defineProperty(NgDropdownDirective.prototype, "opened", {
        // =======================================================================//
        // ! Bindings                                                             //
        // =======================================================================//
        /**
         *
         */
        get: 
        // =======================================================================//
        // ! Bindings                                                             //
        // =======================================================================//
        /**
         *
         * @return {?}
         */
        function () {
            return this._open;
        },
        enumerable: true,
        configurable: true
    });
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     * @param {?} event
     * @param {?=} force
     * @return {?}
     */
    NgDropdownDirective.prototype.Close = 
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     * @param {?} event
     * @param {?=} force
     * @return {?}
     */
    function (event, force) {
        var _this = this;
        if (force === void 0) { force = false; }
        if (!this._open) {
            return;
        }
        /** @type {?} */
        var close = function () {
            _this._open = false;
            /**
             * Emit NULL so listening components know what to do.
             */
            _this.ClearActive();
            _this.hover.emit(null);
            _this.closed.emit();
        };
        if (force) {
            close();
            return;
        }
        if ((this._open && (!this.element.contains(event.target)))) {
            close();
        }
    };
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.Open = 
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (!_this._open && !_this._eref.nativeElement.classList.contains('is-initial-empty')) {
                _this._open = true;
                _this.PrepareList();
                /**
                 *
                 */
                if (_this.FindActive() < 0) {
                    _this._eref.nativeElement.scrollTop = 0;
                }
                else {
                    _this._eref.nativeElement.scrollTop = _this.GetElement(_this.FindActive()).offsetHeight * _this.FindActive();
                }
            }
        }, 0);
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.RefExists = /**
     *
     * @return {?}
     */
    function () {
        return typeof this.input !== 'undefined';
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.FindActive = /**
     *
     * @return {?}
     */
    function () {
        return this._list.reduce(function (result, item, index) {
            if (item.active) {
                result = index;
            }
            return result;
        }, -1);
    };
    /**
     *
     */
    /**
     *
     * @param {?} index
     * @return {?}
     */
    NgDropdownDirective.prototype.SetActive = /**
     *
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index > this._list.length - 1 || index < 0)
            return;
        /**
         *
         */
        this.ClearActive();
        this._list[index].active = true;
        this.hover.emit(this._list[index].key);
        /**
         *
         */
        this.GetElement(index).classList.add('active');
    };
    /**
     *
     */
    /**
     *
     * @param {?} index
     * @return {?}
     */
    NgDropdownDirective.prototype.GetElement = /**
     *
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this._eref.nativeElement.children[index];
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.ClearActive = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._list.forEach(function (item, index) {
            item.active = false;
            /**
             *
             */
            _this.GetElement(index).classList.remove('active');
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.PrepareList = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._list = Object.keys(this.list).map(function (key) {
            return {
                key: key,
                active: _this.ActiveItem(key)
            };
        });
        /**
         *
         */
        this.PrepareChildrenList();
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    NgDropdownDirective.prototype.ActiveItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.active !== null && item === this.active;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.DetermineActiveClass = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._list.forEach(function (item, index) {
            if (typeof _this.GetElement(index) === 'undefined') {
                return;
            }
            /**
             *
             */
            _this.GetElement(index).classList.remove('active');
            if (item.active)
                _this.GetElement(index).classList.add('active');
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.PrepareChildrenList = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var list = this._eref.nativeElement.children;
        setTimeout(function () {
            for (var i = 0; i < list.length; i++) {
                list[i].id = _this._class + i;
            }
        }, 0);
        /**
         *
         */
        this.DetermineActiveClass();
    };
    ;
    /**
     *
     */
    /**
     *
     * @param {?} object
     * @return {?}
     */
    NgDropdownDirective.prototype.DeReference = /**
     *
     * @param {?} object
     * @return {?}
     */
    function (object) {
        var item = object.item;
        /**
         *
         */
        return Object.assign({}, tslib_1.__assign({}, item));
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.ngOnDestroy = /**
     *
     * @return {?}
     */
    function () {
        if (this.RefExists()) {
            this.wheelHandler = this.removeEventListner.bind(this.input);
            // this.input.removeEventListener('keydown');
        }
        if (!this.completion) {
            this.wheelHandler = this.removeEventListner.bind(document);
            // document.removeEventListener('keydown');
        }
        if (!IsMobileOrTablet()) {
            this.wheelHandler = this.removeEventListner.bind(this._eref);
            // this._eref.nativeElement.removeEventListener('mouseover');
        }
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    NgDropdownDirective.prototype.removeEventListner = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        elem.removeEventListener('wheel', this.wheelHandler, true);
    };
    NgDropdownDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngDropdown]'
                },] }
    ];
    /** @nocollapse */
    NgDropdownDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgDropdownDirective.propDecorators = {
        list: [{ type: Input }],
        active: [{ type: Input }],
        input: [{ type: Input }],
        element: [{ type: Input }],
        key: [{ type: Input }],
        completion: [{ type: Input }],
        hover: [{ type: Output }],
        selected: [{ type: Output }],
        closed: [{ type: Output }],
        opened: [{ type: HostBinding, args: ['class.open',] }],
        Close: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
    return NgDropdownDirective;
}());
export { NgDropdownDirective };
if (false) {
    /** @type {?} */
    NgDropdownDirective.prototype.list;
    /** @type {?} */
    NgDropdownDirective.prototype.active;
    /** @type {?} */
    NgDropdownDirective.prototype.input;
    /** @type {?} */
    NgDropdownDirective.prototype.element;
    /** @type {?} */
    NgDropdownDirective.prototype.key;
    /** @type {?} */
    NgDropdownDirective.prototype.completion;
    /** @type {?} */
    NgDropdownDirective.prototype.hover;
    /** @type {?} */
    NgDropdownDirective.prototype.selected;
    /** @type {?} */
    NgDropdownDirective.prototype.closed;
    /** @type {?} */
    NgDropdownDirective.prototype._open;
    /** @type {?} */
    NgDropdownDirective.prototype._list;
    /** @type {?} */
    NgDropdownDirective.prototype._class;
    /** @type {?} */
    NgDropdownDirective.prototype.wheelHandler;
    /** @type {?} */
    NgDropdownDirective.prototype._eref;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,