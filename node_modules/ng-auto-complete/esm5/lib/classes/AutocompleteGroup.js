/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SearchableAutoCompleteItems } from './AutocompleteItem';
var AutocompleteGroup = /** @class */ (function () {
    function AutocompleteGroup() {
        this.async = null;
        this.removals = [];
    }
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @param {?} titleKey
     * @return {?}
     */
    AutocompleteGroup.prototype.SetNewValue = /**
     *
     * @param {?} value
     * @param {?} titleKey
     * @return {?}
     */
    function (value, titleKey) {
        /** @type {?} */
        var values = SearchableAutoCompleteItems(value, titleKey);
        this.SetCopy(values);
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, values);
    };
    /**
     *
     */
    /**
     *
     * @param {?} ids
     * @return {?}
     */
    AutocompleteGroup.prototype.Removables = /**
     *
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this.removals = ids;
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, this._copy);
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    AutocompleteGroup.prototype.InitialValue = /**
     *
     * @return {?}
     */
    function () {
        this.value = this.FilterRemovals(this.removals, this.initialValue);
        /**
         *
         */
        this.SetCopy(this.initialValue);
    };
    /**
     *
     */
    /**
     *
     * @param {?} values
     * @return {?}
     */
    AutocompleteGroup.prototype.SetCopy = /**
     *
     * @param {?} values
     * @return {?}
     */
    function (values) {
        this._copy = Object.assign([], values);
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    AutocompleteGroup.prototype.SetValues = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = SearchableAutoCompleteItems(value, this.keys.titleKey, this.keys.childrenKey);
        /**
         *
         */
        this.initialValue = Object.assign({}, this.value);
        this.SetCopy(Object.assign({}, this.value));
    };
    /**
     *
     */
    /**
     *
     * @param {?} removals
     * @param {?} value
     * @return {?}
     */
    AutocompleteGroup.prototype.FilterRemovals = /**
     *
     * @param {?} removals
     * @param {?} value
     * @return {?}
     */
    function (removals, value) {
        /** @type {?} */
        var filtered = Object.assign({}, value);
        /** @type {?} */
        var key;
        /** @type {?} */
        var keys = [];
        for (key in filtered) {
            if (filtered.hasOwnProperty(key)) {
                removals.forEach(function (id) {
                    // Comparable string and ID
                    /** @type {?} */
                    var f = "_id_" + String(id);
                    /** @type {?} */
                    var c = key.substring(key.indexOf(f), key.length);
                    if (f === c) {
                        keys.push(key);
                    }
                });
            }
        }
        keys.forEach(function (k) {
            delete filtered[k];
        });
        return filtered;
    };
    return AutocompleteGroup;
}());
export { AutocompleteGroup };
if (false) {
    /** @type {?} */
    AutocompleteGroup.prototype.initialValue;
    /** @type {?} */
    AutocompleteGroup.prototype.key;
    /** @type {?} */
    AutocompleteGroup.prototype.keys;
    /** @type {?} */
    AutocompleteGroup.prototype.value;
    /** @type {?} */
    AutocompleteGroup.prototype.remove;
    /** @type {?} */
    AutocompleteGroup.prototype.placeholder;
    /** @type {?} */
    AutocompleteGroup.prototype.parent;
    /** @type {?} */
    AutocompleteGroup.prototype.completion;
    /** @type {?} */
    AutocompleteGroup.prototype.searchLength;
    /** @type {?} */
    AutocompleteGroup.prototype.async;
    /** @type {?} */
    AutocompleteGroup.prototype.noResults;
    /** @type {?} */
    AutocompleteGroup.prototype.dropdownValue;
    /** @type {?} */
    AutocompleteGroup.prototype.placeholderValue;
    /**
     * @type {?}
     * @private
     */
    AutocompleteGroup.prototype.removals;
    /**
     * @type {?}
     * @private
     */
    AutocompleteGroup.prototype._copy;
}
/**
 *
 * @template T
 * @param {?} placeholder
 * @param {?} key
 * @param {?} value
 * @param {?} keys
 * @param {?=} parent
 * @param {?=} completion
 * @param {?=} searchLength
 * @return {?}
 */
export function CreateNewAutocompleteGroup(placeholder, key, value, keys, parent, completion, searchLength) {
    if (parent === void 0) { parent = ''; }
    if (completion === void 0) { completion = true; }
    if (searchLength === void 0) { searchLength = 2; }
    /** @type {?} */
    var group = new AutocompleteGroup();
    group.key = key;
    group.keys = keys;
    group.placeholder = placeholder;
    group.parent = parent;
    group.completion = completion;
    group.searchLength = searchLength;
    /**
     * Initial value needed, if we empty search box or want to clear it, it needs to be reset.
     * Setting copy, used if user wants to remove values (by id.). This _ list gets filtered.
     */
    group.SetValues(value);
    return group;
}
//# sourceMappingURL=data:application/json;base64,