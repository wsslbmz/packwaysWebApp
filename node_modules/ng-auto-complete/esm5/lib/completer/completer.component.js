/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { debounceTime } from 'rxjs/operators';
import { Component, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';
import { AutocompleteGroup } from '../classes/AutocompleteGroup';
import { ComparableAutoCompleteString, SearchableAutoCompleteString } from '../classes/AutocompleteItem';
import { NgDropdownDirective } from '../dropdown/ng-dropdown.directive';
import { Subject } from 'rxjs';
var CompleterComponent = /** @class */ (function () {
    function CompleterComponent(_zone) {
        this._zone = _zone;
        this.cleared = new EventEmitter();
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = (/** @type {?} */ ({}));
        this._change = new Subject();
        this._items = {};
        this._completer = '';
        this._highlight = '';
        this._DOM = {
            notFound: (/** @type {?} */ (false)),
            empty: (/** @type {?} */ (false)),
            placeholder: (/** @type {?} */ (null)),
            selected: (/** @type {?} */ ('')),
            isLoading: (/** @type {?} */ (false))
        };
    }
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ngOnInit = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            _this._change.pipe(debounceTime(300))
                .subscribe(function (value) {
                _this._zone.run(function () {
                    if (_this.group.async !== null) {
                        _this.RunAsyncFunction(value);
                    }
                    else {
                        _this.OnModelChange(value);
                    }
                });
            });
        });
        this.SetItems();
    };
    /**
     * Only used when completion is off.
     */
    /**
     * Only used when completion is off.
     * @return {?}
     */
    CompleterComponent.prototype.RegisterClick = /**
     * Only used when completion is off.
     * @return {?}
     */
    function () {
        if (!this.group.completion) {
            this.SwitchDropdownState();
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.DropdownArray = /**
     *
     * @return {?}
     */
    function () {
        if (this.group.completion) {
            this.SwitchDropdownState();
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.SwitchDropdownState = /**
     *
     * @return {?}
     */
    function () {
        if (this.dropdown._open) {
            this.CloseDropdown();
            return;
        }
        /**
         *
         */
        this.OpenDropdown();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.CloseDropdown = /**
     *
     * @return {?}
     */
    function () {
        this.dropdown._open = false;
        /**
         *
         */
        this._DOM.placeholder = null;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.OpenDropdown = /**
     *
     * @return {?}
     */
    function () {
        this.dropdown.Open();
        /**
         *
         */
        this._DOM.placeholder = null;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.SetItems = /**
     *
     * @return {?}
     */
    function () {
        this._items = this.group.value;
        this.IsInitialEmpty();
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    CompleterComponent.prototype.SelectItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var i;
        if (typeof item === 'string') {
            i = this._items[item];
            this._DOM.selected = item;
        }
        else {
            i = item;
            this._DOM.selected = SearchableAutoCompleteString(item.title, item.id);
        }
        this._completer = i.title;
        this._highlight = '';
        this.dropdown.Close(null, true);
        this.selected.emit({ group: { key: this.group.key }, item: i });
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.RunAsyncFunction = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var values;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._completer = value;
                        this._highlight = value;
                        this._DOM.selected = null;
                        if (!(value.length === 0)) return [3 /*break*/, 1];
                        this.group.InitialValue();
                        this.ClearModel();
                        this.dropdown.Close('', true);
                        return [3 /*break*/, 3];
                    case 1:
                        if (!(value.length > this.group.searchLength)) return [3 /*break*/, 3];
                        this._DOM.isLoading = true;
                        return [4 /*yield*/, this.group.async(value)];
                    case 2:
                        values = _a.sent();
                        this.group.SetNewValue(values, this.group.keys.titleKey);
                        this._DOM.isLoading = false;
                        this._items = this.group.value;
                        this.EmptySearch(this._items, value);
                        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
                        this.IsInitialEmpty();
                        this.dropdown.Open();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.OnModelChange = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._completer = value;
        this._highlight = value;
        this._DOM.selected = null;
        if (value.length === 0) {
            this.ClearModel();
            this.dropdown.Close('', true);
        }
        else if (value.length > this.group.searchLength) {
            this.CompareItemsAndSet(value);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ClearModel = /**
     *
     * @return {?}
     */
    function () {
        this._DOM.selected = null;
        this._DOM.notFound = false;
        this.cleared.emit(this.group.key);
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.CompareItemsAndSet = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var obj = {};
        for (var key in this.group.value) {
            if (ComparableAutoCompleteString(key).toLowerCase().indexOf(value.toLowerCase()) > -1) {
                obj[key] = this.group.value[key];
            }
        }
        this._items = obj;
        this.EmptySearch(this._items, value);
        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
        this.IsInitialEmpty();
        this.dropdown.Open();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.OnInputBlurred = /**
     *
     * @return {?}
     */
    function () {
        if (!this.HasChosenValue()) {
            /**
             * Let component know completer input has been cleared -
             * this function shows the list again, also resets children, if chosen.
             */
            this.OnModelChange('');
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    CompleterComponent.prototype.OnHoverDropdownItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (typeof item == 'string') {
            this._DOM.placeholder = this._items[item];
            return;
        }
        if (item == null) {
            this._DOM.placeholder = null;
            return;
        }
        this._DOM.placeholder = item;
    };
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    CompleterComponent.prototype.IsInitialEmpty = 
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    function () {
        if (Object.keys(this._items).length === 0 && this._completer.length === 0) {
            this._DOM.empty = true;
            return;
        }
        this._DOM.empty = false;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.HasChosenValue = /**
     *
     * @return {?}
     */
    function () {
        return this._DOM.selected !== null;
    };
    /**
     *
     */
    /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    CompleterComponent.prototype.EmptySearch = /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    function (obj, query) {
        if (Object.keys(obj).length > 0) {
            this._DOM.notFound = false;
            return;
        }
        this._DOM.notFound = true;
        this.noResult.emit({ group: { key: this.group.key }, query: query });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ClearValue = /**
     *
     * @return {?}
     */
    function () {
        this._completer = '';
        this._DOM.selected = null;
        this.group.InitialValue();
        this.IsInitialEmpty();
        /**
         *
         */
        this.selected.emit({ group: { key: this.group.key }, item: null });
    };
    CompleterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-completer',
                    template: "\n        <div #element class=\"ng-autocomplete-dropdown\"\n             [ngClass]=\"{'open': dropdown._open, 'is-loading': _DOM.isLoading, 'is-async': group.async !== null}\">\n\n            <!--GROUP: {{group.key}}-->\n\n            <div class=\"ng-autocomplete-inputs\" (click)=\"RegisterClick()\"\n                 [ngClass]=\"{'completion-off': !group.completion}\">\n                <span class=\"ng-autocomplete-placeholder\"\n                      *ngIf=\"_DOM.placeholder\">\n                  <ng-container *ngIf=\"group.placeholderValue\">\n                      <ng-template *ngTemplateOutlet=\"group.placeholderValue; context: {$implicit: _DOM.placeholder}\"></ng-template>\n                  </ng-container>\n                  <ng-template [ngIf]=\"!group.placeholderValue\">\n                      {{_DOM.placeholder.title}}\n                  </ng-template>\n                </span>\n                <input #input type=\"text\" [placeholder]=\"group.placeholder\" name=\"completer\" [(ngModel)]=\"_completer\"\n                       (ngModelChange)=\"_change.next($event);\"\n                       [value]=\"_completer\"\n                       autocomplete=\"off\"\n                       (click)=\"OpenDropdown()\"\n                       (focus)=\"OpenDropdown()\" class=\"ng-autocomplete-input\">\n\n                <span [ngClass]=\"{'open': dropdown._open}\" class=\"ng-autocomplete-dropdown-icon\"\n                      (click)=\"DropdownArray()\"></span>\n            </div>\n\n            <div class=\"ng-dropdown\" ngDropdown [list]=\"_items\" [element]=\"element\" [input]=\"input\"\n                 [ngClass]=\"{'is-initial-empty': _DOM.empty}\"\n                 [active]=\"_DOM.selected\" [key]=\"group.key\"\n                 [completion]=\"group.completion\"\n                 (hover)=\"OnHoverDropdownItem($event)\"\n                 (selected)=\"SelectItem($event)\"\n                 (closed)=\"OnInputBlurred()\"\n            >\n                <div *ngIf=\"_DOM.notFound && group.noResults\" class=\"dropdown-item no-results\">\n                    <ng-container *ngIf=\"group.noResults\">\n                        <ng-template *ngTemplateOutlet=\"group.noResults; context: {$implicit: _completer}\"></ng-template>\n                    </ng-container>\n                </div>\n\n                <div class=\"dropdown-item\" *ngFor=\"let item of _items | keys; let i = index\"\n                     (click)=\"SelectItem(_items[item])\">\n\n                    <ng-container *ngIf=\"group.dropdownValue\">\n                        <ng-template\n                            *ngTemplateOutlet=\"group.dropdownValue; context: {$implicit: _items[item], highlight: _items[item].title | highlight:_highlight}\"></ng-template>\n                    </ng-container>\n\n                    <div *ngIf=\"!group.dropdownValue\" [innerHTML]=\"_items[item].title | highlight:_highlight\"></div>\n                </div>\n            </div>\n        </div>",
                    styles: ["\n        .ng-autocomplete-inputs {\n            position: relative;\n        }\n\n        .ng-autocomplete-inputs.completion-off {\n            cursor: pointer;\n        }\n\n        .ng-autocomplete-inputs.completion-off input {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-placeholder {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-dropdown-icon {\n\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.is-empty {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.open {\n            display: block;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    CompleterComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    CompleterComponent.propDecorators = {
        dropdown: [{ type: ViewChild, args: [NgDropdownDirective,] }],
        cleared: [{ type: Output }],
        selected: [{ type: Output }],
        noResult: [{ type: Output, args: ['no-result',] }],
        group: [{ type: Input }]
    };
    return CompleterComponent;
}());
export { CompleterComponent };
if (false) {
    /** @type {?} */
    CompleterComponent.prototype.dropdown;
    /** @type {?} */
    CompleterComponent.prototype.cleared;
    /** @type {?} */
    CompleterComponent.prototype.selected;
    /** @type {?} */
    CompleterComponent.prototype.noResult;
    /** @type {?} */
    CompleterComponent.prototype.group;
    /** @type {?} */
    CompleterComponent.prototype._change;
    /** @type {?} */
    CompleterComponent.prototype._items;
    /** @type {?} */
    CompleterComponent.prototype._completer;
    /** @type {?} */
    CompleterComponent.prototype._highlight;
    /** @type {?} */
    CompleterComponent.prototype._DOM;
    /**
     * @type {?}
     * @private
     */
    CompleterComponent.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,