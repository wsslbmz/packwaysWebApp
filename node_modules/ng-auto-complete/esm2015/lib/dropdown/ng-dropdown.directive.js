/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output } from "@angular/core";
import { IsMobileOrTablet } from "../utils/utils";
export class NgDropdownDirective {
    /**
     * @param {?} _eref
     */
    constructor(_eref) {
        this._eref = _eref;
        this.list = [];
        this.active = null;
        this.input = null;
        this.element = null;
        this.key = '';
        this.completion = true;
        this.hover = new EventEmitter();
        this.selected = new EventEmitter();
        this.closed = new EventEmitter();
        this._open = false;
        this._list = [];
        this._class = '';
    }
    /**
     *
     * @return {?}
     */
    ngOnInit() {
        this._class = `dr-item-${this.key}-`;
        if (this.RefExists()) {
            this.input.addEventListener('keydown', (event) => {
                this.keyDown(event);
            });
        }
        if (!this.completion) {
            document.addEventListener('keydown', (event) => {
                if (this._open) {
                    this.keyDown(event);
                }
            });
        }
        if (!IsMobileOrTablet()) {
            this._eref.nativeElement.addEventListener('mouseover', (event) => {
                this.OnMouseOver(event);
            });
        }
        /**
         *
         */
        this.PrepareList();
    }
    /**
     *
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (typeof changes['active'] !== 'undefined' && !changes['active'].firstChange) {
            this.PrepareList();
        }
        if (typeof changes['list'] !== 'undefined') {
            this.list = changes['list'].currentValue;
            /**
             *
             */
            this.PrepareList();
        }
    }
    /**
     *
     * @param {?} event
     * @return {?}
     */
    keyDown(event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        /**
         *
         */
        switch (event.code) {
            case 'ArrowDown':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() + 1);
                this.DropdownFocusAreaDown();
                event.preventDefault();
                break;
            case 'ArrowUp':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() - 1);
                this.DropdownFocusAreaUp();
                event.preventDefault();
                break;
            case 'Enter':
                this.EmitSelected();
                this.Close(null, true);
                event.preventDefault();
                break;
            case 'Escape':
                this.Close(null, true);
                event.preventDefault();
                break;
            case 'Tab':
                if (!event.shiftKey) {
                    this.EmitSelected();
                }
                this.Close(null, true);
                break;
            default:
                return;
        }
    }
    /**
     *
     * @param {?} event
     * @return {?}
     */
    OnMouseOver(event) {
        // Mouse didn't actually move, so no logic needed.
        if (event.movementX == 0 && event.movementY == 0) {
            return;
        }
        /**
         *
         * @type {?}
         */
        const el = event.target || event.srcElement;
        if (el.id.length > 0 && el.id.includes(this._class)) {
            this.SetActive(Number(el.id.slice(this._class.length, el.id.length)));
        }
    }
    /**
     *
     * @return {?}
     */
    EmitSelected() {
        if (this.FindActive() > -1) {
            this.selected.emit(this._list[this.FindActive()].key);
        }
    }
    /**
     *
     * @return {?}
     */
    DropdownFocusAreaDown() {
        /** @type {?} */
        let scroll = this._eref.nativeElement.offsetHeight + this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if ((this.GetElement(this.FindActive()).offsetTop + this.GetElement(this.FindActive()).offsetHeight) > scroll) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop - (this._eref.nativeElement.offsetHeight - this.GetElement(this.FindActive()).offsetHeight);
        }
    }
    /**
     *
     * @return {?}
     */
    DropdownFocusAreaUp() {
        /** @type {?} */
        let scroll = this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if (this.GetElement(this.FindActive()).offsetTop < scroll && scroll > 0) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop;
        }
    }
    // =======================================================================//
    // ! Bindings                                                             //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    get opened() {
        return this._open;
    }
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     * @param {?} event
     * @param {?=} force
     * @return {?}
     */
    Close(event, force = false) {
        if (!this._open) {
            return;
        }
        /** @type {?} */
        const close = () => {
            this._open = false;
            /**
             * Emit NULL so listening components know what to do.
             */
            this.ClearActive();
            this.hover.emit(null);
            this.closed.emit();
        };
        if (force) {
            close();
            return;
        }
        if ((this._open && (!this.element.contains(event.target)))) {
            close();
        }
    }
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    Open() {
        setTimeout(() => {
            if (!this._open && !this._eref.nativeElement.classList.contains('is-initial-empty')) {
                this._open = true;
                this.PrepareList();
                /**
                 *
                 */
                if (this.FindActive() < 0) {
                    this._eref.nativeElement.scrollTop = 0;
                }
                else {
                    this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetHeight * this.FindActive();
                }
            }
        }, 0);
    }
    /**
     *
     * @return {?}
     */
    RefExists() {
        return typeof this.input !== 'undefined';
    }
    /**
     *
     * @return {?}
     */
    FindActive() {
        return this._list.reduce((result, item, index) => {
            if (item.active) {
                result = index;
            }
            return result;
        }, -1);
    }
    /**
     *
     * @param {?} index
     * @return {?}
     */
    SetActive(index) {
        if (index > this._list.length - 1 || index < 0)
            return;
        /**
         *
         */
        this.ClearActive();
        this._list[index].active = true;
        this.hover.emit(this._list[index].key);
        /**
         *
         */
        this.GetElement(index).classList.add('active');
    }
    /**
     *
     * @param {?} index
     * @return {?}
     */
    GetElement(index) {
        return this._eref.nativeElement.children[index];
    }
    /**
     *
     * @return {?}
     */
    ClearActive() {
        this._list.forEach((item, index) => {
            item.active = false;
            /**
             *
             */
            this.GetElement(index).classList.remove('active');
        });
    }
    /**
     *
     * @return {?}
     */
    PrepareList() {
        this._list = Object.keys(this.list).map((key) => {
            return {
                key,
                active: this.ActiveItem(key)
            };
        });
        /**
         *
         */
        this.PrepareChildrenList();
    }
    /**
     *
     * @param {?} item
     * @return {?}
     */
    ActiveItem(item) {
        return this.active !== null && item === this.active;
    }
    /**
     *
     * @return {?}
     */
    DetermineActiveClass() {
        this._list.forEach((item, index) => {
            if (typeof this.GetElement(index) === 'undefined') {
                return;
            }
            /**
             *
             */
            this.GetElement(index).classList.remove('active');
            if (item.active)
                this.GetElement(index).classList.add('active');
        });
    }
    /**
     *
     * @return {?}
     */
    PrepareChildrenList() {
        /** @type {?} */
        const list = this._eref.nativeElement.children;
        setTimeout(() => {
            for (let i = 0; i < list.length; i++) {
                list[i].id = this._class + i;
            }
        }, 0);
        /**
         *
         */
        this.DetermineActiveClass();
    }
    ;
    /**
     *
     * @param {?} object
     * @return {?}
     */
    DeReference(object) {
        const { item } = object;
        /**
         *
         */
        return Object.assign({}, Object.assign({}, item));
    }
    /**
     *
     * @return {?}
     */
    ngOnDestroy() {
        if (this.RefExists()) {
            this.wheelHandler = this.removeEventListner.bind(this.input);
            // this.input.removeEventListener('keydown');
        }
        if (!this.completion) {
            this.wheelHandler = this.removeEventListner.bind(document);
            // document.removeEventListener('keydown');
        }
        if (!IsMobileOrTablet()) {
            this.wheelHandler = this.removeEventListner.bind(this._eref);
            // this._eref.nativeElement.removeEventListener('mouseover');
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    removeEventListner(elem) {
        elem.removeEventListener('wheel', this.wheelHandler, true);
    }
}
NgDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngDropdown]'
            },] }
];
/** @nocollapse */
NgDropdownDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgDropdownDirective.propDecorators = {
    list: [{ type: Input }],
    active: [{ type: Input }],
    input: [{ type: Input }],
    element: [{ type: Input }],
    key: [{ type: Input }],
    completion: [{ type: Input }],
    hover: [{ type: Output }],
    selected: [{ type: Output }],
    closed: [{ type: Output }],
    opened: [{ type: HostBinding, args: ['class.open',] }],
    Close: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    NgDropdownDirective.prototype.list;
    /** @type {?} */
    NgDropdownDirective.prototype.active;
    /** @type {?} */
    NgDropdownDirective.prototype.input;
    /** @type {?} */
    NgDropdownDirective.prototype.element;
    /** @type {?} */
    NgDropdownDirective.prototype.key;
    /** @type {?} */
    NgDropdownDirective.prototype.completion;
    /** @type {?} */
    NgDropdownDirective.prototype.hover;
    /** @type {?} */
    NgDropdownDirective.prototype.selected;
    /** @type {?} */
    NgDropdownDirective.prototype.closed;
    /** @type {?} */
    NgDropdownDirective.prototype._open;
    /** @type {?} */
    NgDropdownDirective.prototype._list;
    /** @type {?} */
    NgDropdownDirective.prototype._class;
    /** @type {?} */
    NgDropdownDirective.prototype.wheelHandler;
    /** @type {?} */
    NgDropdownDirective.prototype._eref;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,