/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { CompleterComponent } from './completer/completer.component';
import { ReturnStringArrayByID } from './utils/utils';
import { Subject } from 'rxjs';
export class NgAutoCompleteComponent {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        this.cdr = cdr;
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = [];
        this.key = '';
        this.classes = [];
        this._viewHasBeenInit = false;
        this._viewInitSubject = new Subject();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     *
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     *
     * @return {?}
     */
    ngAfterViewChecked() {
        if (!this._viewHasBeenInit) {
            /** @type {?} */
            let el = this.init.nativeElement.querySelector('.after-view-init');
            if (window.getComputedStyle(el).length > 0) {
                this._viewHasBeenInit = true;
                this._viewInitSubject.next(true);
            }
        }
    }
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    ListenToSelected(selected) {
        this.selected.emit(selected);
        /**
         *
         */
        this.SetChildren(selected);
    }
    /**
     *
     * @param {?} group
     * @return {?}
     */
    NoResult(group) {
        this.noResult.emit(group);
    }
    /**
     *
     * @param {?} key
     * @return {?}
     */
    InputCleared(key) {
        this.group.forEach((group) => {
            if (group.key === key || group.parent === key) {
                this.ResetInput(group.key);
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    }
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    SetChildren(selected) {
        this.group.forEach((item) => {
            if (item.parent == selected.group.key) {
                this.ResetInput(item.key);
                /**
                 *
                 */
                if (selected.item !== null && typeof selected.item.children !== 'undefined') {
                    item.SetNewValue(selected.item.children, selected.group.keys.titleKey);
                }
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    }
    /**
     *
     * @return {?}
     */
    TriggerChange() {
        this.completers.forEach((completer) => {
            completer.SetItems();
        });
    }
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @return {?}
     */
    GetInput(key) {
        return this.completers.reduce((result, completer) => {
            if (completer.group.key === key) {
                result = completer;
            }
            return result;
        }, (/** @type {?} */ ({})));
    }
    /**
     *
     * @param {?} key
     * @param {?} f
     * @return {?}
     */
    SubscribeInput(key, f) {
        if (this._viewHasBeenInit) {
            /** @type {?} */
            let completer = this.GetInput(key);
            /**
             *
             */
            f(completer);
            return;
        }
        this._viewInitSubject.subscribe((_bool) => {
            /** @type {?} */
            let completer = this.GetInput(key);
            setTimeout(() => {
                f(completer);
            });
            this._viewInitSubject.unsubscribe();
        });
    }
    /**
     *
     * @param {?} key
     * @return {?}
     */
    ResetInput(key) {
        this.SubscribeInput(key, (completer) => {
            completer.ClearValue();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} values
     * @return {?}
     */
    SetValues(key, values) {
        this.SubscribeInput(key, (completer) => {
            completer.group.SetValues(values);
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    SetTemplate(key, type, template) {
        this.SubscribeInput(key, (completer) => {
            completer.group[type] = template;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} promise
     * @return {?}
     */
    SetAsync(key, promise) {
        this.SubscribeInput(key, (completer) => {
            completer.group.async = promise;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} id
     * @return {?}
     */
    SelectItem(key, id) {
        this.SubscribeInput(key, (completer) => {
            Object.keys(completer._items).forEach((key) => {
                /** @type {?} */
                let f = `_id_${String(id)}`;
                /** @type {?} */
                let c = key.substring(key.indexOf(f), key.length);
                if (f === c) {
                    completer.SelectItem(completer._items[key]);
                }
            });
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} ids
     * @return {?}
     */
    RemovableValues(key, ids) {
        this.SubscribeInput(key, (completer) => {
            completer.group.Removables(ReturnStringArrayByID(ids));
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @return {?}
     */
    ResetInputs() {
        this.group.forEach((item) => {
            this.ResetInput(item.key);
        });
    }
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @param {?} list
     * @return {?}
     */
    static FindCompleter(key, list) {
        /** @type {?} */
        const completer = list.filter((completer) => {
            return key === completer.key;
        });
        if (typeof completer[0] !== 'undefined') {
            return completer[0];
        }
        return null;
    }
}
NgAutoCompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-auto-complete',
                template: `
        <div #init style="display: none;"><span class="after-view-init"></span></div>
        <ng-completer [ngClass]="classes" *ngFor="let item of group" (cleared)="InputCleared($event)"
                      (no-result)="NoResult($event)"
                      (selected)="ListenToSelected($event)"
                      [group]="item"></ng-completer>
    `
            }] }
];
/** @nocollapse */
NgAutoCompleteComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NgAutoCompleteComponent.propDecorators = {
    completers: [{ type: ViewChildren, args: [CompleterComponent,] }],
    init: [{ type: ViewChild, args: ['init',] }],
    selected: [{ type: Output }],
    noResult: [{ type: Output, args: ['no-result',] }],
    group: [{ type: Input }],
    key: [{ type: Input }],
    classes: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgAutoCompleteComponent.prototype.completers;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.init;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.selected;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.noResult;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.group;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.key;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.classes;
    /** @type {?} */
    NgAutoCompleteComponent.prototype._viewHasBeenInit;
    /** @type {?} */
    NgAutoCompleteComponent.prototype._viewInitSubject;
    /**
     * @type {?}
     * @private
     */
    NgAutoCompleteComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,