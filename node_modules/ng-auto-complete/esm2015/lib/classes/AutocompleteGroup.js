/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SearchableAutoCompleteItems } from './AutocompleteItem';
export class AutocompleteGroup {
    constructor() {
        this.async = null;
        this.removals = [];
    }
    /**
     *
     * @param {?} value
     * @param {?} titleKey
     * @return {?}
     */
    SetNewValue(value, titleKey) {
        /** @type {?} */
        const values = SearchableAutoCompleteItems(value, titleKey);
        this.SetCopy(values);
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, values);
    }
    /**
     *
     * @param {?} ids
     * @return {?}
     */
    Removables(ids) {
        this.removals = ids;
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, this._copy);
    }
    /**
     *
     * @return {?}
     */
    InitialValue() {
        this.value = this.FilterRemovals(this.removals, this.initialValue);
        /**
         *
         */
        this.SetCopy(this.initialValue);
    }
    /**
     *
     * @param {?} values
     * @return {?}
     */
    SetCopy(values) {
        this._copy = Object.assign([], values);
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    SetValues(value) {
        this.value = SearchableAutoCompleteItems(value, this.keys.titleKey, this.keys.childrenKey);
        /**
         *
         */
        this.initialValue = Object.assign({}, this.value);
        this.SetCopy(Object.assign({}, this.value));
    }
    /**
     *
     * @param {?} removals
     * @param {?} value
     * @return {?}
     */
    FilterRemovals(removals, value) {
        /** @type {?} */
        let filtered = Object.assign({}, value);
        /** @type {?} */
        let key;
        /** @type {?} */
        let keys = [];
        for (key in filtered) {
            if (filtered.hasOwnProperty(key)) {
                removals.forEach((id) => {
                    // Comparable string and ID
                    /** @type {?} */
                    let f = `_id_${String(id)}`;
                    /** @type {?} */
                    let c = key.substring(key.indexOf(f), key.length);
                    if (f === c) {
                        keys.push(key);
                    }
                });
            }
        }
        keys.forEach((k) => {
            delete filtered[k];
        });
        return filtered;
    }
}
if (false) {
    /** @type {?} */
    AutocompleteGroup.prototype.initialValue;
    /** @type {?} */
    AutocompleteGroup.prototype.key;
    /** @type {?} */
    AutocompleteGroup.prototype.keys;
    /** @type {?} */
    AutocompleteGroup.prototype.value;
    /** @type {?} */
    AutocompleteGroup.prototype.remove;
    /** @type {?} */
    AutocompleteGroup.prototype.placeholder;
    /** @type {?} */
    AutocompleteGroup.prototype.parent;
    /** @type {?} */
    AutocompleteGroup.prototype.completion;
    /** @type {?} */
    AutocompleteGroup.prototype.searchLength;
    /** @type {?} */
    AutocompleteGroup.prototype.async;
    /** @type {?} */
    AutocompleteGroup.prototype.noResults;
    /** @type {?} */
    AutocompleteGroup.prototype.dropdownValue;
    /** @type {?} */
    AutocompleteGroup.prototype.placeholderValue;
    /**
     * @type {?}
     * @private
     */
    AutocompleteGroup.prototype.removals;
    /**
     * @type {?}
     * @private
     */
    AutocompleteGroup.prototype._copy;
}
/**
 *
 * @template T
 * @param {?} placeholder
 * @param {?} key
 * @param {?} value
 * @param {?} keys
 * @param {?=} parent
 * @param {?=} completion
 * @param {?=} searchLength
 * @return {?}
 */
export function CreateNewAutocompleteGroup(placeholder, key, value, keys, parent = '', completion = true, searchLength = 2) {
    /** @type {?} */
    const group = new AutocompleteGroup();
    group.key = key;
    group.keys = keys;
    group.placeholder = placeholder;
    group.parent = parent;
    group.completion = completion;
    group.searchLength = searchLength;
    /**
     * Initial value needed, if we empty search box or want to clear it, it needs to be reset.
     * Setting copy, used if user wants to remove values (by id.). This _ list gets filtered.
     */
    group.SetValues(value);
    return group;
}
//# sourceMappingURL=data:application/json;base64,